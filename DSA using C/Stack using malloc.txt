#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct{
  int capacity;
  int size;
  int *p;
}Stack;

Stack *create_new(int capacity)
{
  Stack *stack=(Stack*)malloc(sizeof(Stack)*capacity);
  if(stack==NULL) return NULL;
  stack->p=malloc(sizeof(int)*capacity);
  if(stack->p==NULL) return NULL;
  stack->capacity=capacity;
  stack->size=0;
  return stack;
}

void destroy(Stack *stack)
{
  free(stack->p);
  free(stack);
}

bool is_full(Stack *stack)
{
  return stack->capacity==stack->size;
}

bool is_empty(Stack *stack)
{
  return stack->size==0;
}
 
bool push(Stack *stack, int item)
{
  if(is_full(stack)) return false;
  stack->p[stack->size]=item;
  stack->size++;
  return true;
}

bool pop(Stack *stack, int *item)
{
  if(is_empty(stack)) return false;
  stack->size--;
  *item=stack->p[stack->size];
  return true;
}

bool peek(Stack *stack, int *item)
{
  if(is_empty(stack)) return false;
  *item=stack->p[stack->size-1];
  return true;
}

int main()
{
  Stack *stack=create_new(5);
  bool a;
  destroy(stack);
  push(stack,10);
  push(stack,20);
  push(stack,30);
  push(stack,40);
  push(stack,50);
  a=push(stack,60);
  if(a==false)
  {
    printf("ERROR IN SIZE\n");
  }
  
  int g,h;
  pop(stack,&g);
  pop(stack,&h);
  printf("%d  %d",g,h);
  return 0;
  
}